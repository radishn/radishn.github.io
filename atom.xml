<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-24T01:20:11.927Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Radishn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL基础知识</title>
    <link href="http://example.com/2021/03/24/MySQL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://example.com/2021/03/24/MySQL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2021-03-24T01:14:14.000Z</published>
    <updated>2021-03-24T01:20:11.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL基础知识"><a href="#MySQL基础知识" class="headerlink" title="MySQL基础知识"></a>MySQL基础知识</h1><p>​        MySQL中查看安装路径的命令：ps -ef|grep mysql，MySQL相关文件的存放路径：</p><p><a href="https://imgchr.com/i/DiZSFH"><img src="https://s3.ax1x.com/2020/11/15/DiZSFH.png" alt="DiZSFH.png"></a></p><h2 id="修改字符集"><a href="#修改字符集" class="headerlink" title="修改字符集"></a>修改字符集</h2><p>​        在Linux环境下，如果需要对配置文件做修改的话，无论是小修改还是大面积的修改，最好最好在修改之前先对原始的配置文件进行备份，配置文件的修改没有人能够保证一定正确。如果不进行备份，万一修改错误很可能整个MySQL都用不了。</p><p>​        MySQL5.5的配置文件是在 /usr/share/mysql/my-huge.cnf，MySQL是5.7版本的配置文件在 /etc/my.cnf，接下来，我们先对配置文件进行备份：</p><p><a href="https://imgchr.com/i/Dimhef"><img src="https://s3.ax1x.com/2020/11/15/Dimhef.md.png" alt="Dimhef.md.png"></a></p><p>​        拷贝完成之后不要忘记重启MySQL服务，这里centos7和centos7之前的命令有差别，centos6的命令是：</p><p>service mysqld restart，centos7的命令是：systemctl mysqld restart。</p><p>​        重启之后使用命令重新登录MySQL，此时我们新建一个db01数据库，在这个数据库中新建一张user表，字段有两个：int类型的id，varchar类型的name，name长度为20。此时往表中插入数据，插入英文一切正常，但是插入英文呢，MySQL5.5可以插入，但是查询时时乱码，而我这里在MySQL5.7也试了一下，插入直接出错：</p><p><a href="https://imgchr.com/i/DinX3d"><img src="https://s3.ax1x.com/2020/11/15/DinX3d.png" alt="DinX3d.png"></a></p><p>​        这个时候我们可以看看，数据库的默认字符集是什么，使用：show variables like ‘%char%’;命令查看，我这里查出来字符集是Latin1</p><p><a href="https://imgchr.com/i/Diu6KI"><img src="https://s3.ax1x.com/2020/11/15/Diu6KI.png" alt="Diu6KI.png"></a></p><p>​        这个时候，我们就需要进入我们刚刚拷贝出来的那个配置文件，修改其字符集。为了统一版本，我这里之后的操作都是<strong>基于MySQL5.7</strong>版本的。</p><p><a href="https://imgchr.com/i/DiI1Fs"><img src="https://s3.ax1x.com/2020/11/15/DiI1Fs.png" alt="DiI1Fs.png"></a></p><p>​        以下就是字符集编码修改后的配置文件，只需要在末尾添加标出的那句即可，添加完成后保存退出，退出后不要忘了重启mysqld服务再连接数据库，之后再插入中文内容就正常了。</p><h2 id="MySQL逻辑架构简介"><a href="#MySQL逻辑架构简介" class="headerlink" title="MySQL逻辑架构简介"></a>MySQL逻辑架构简介</h2><p>​        MySQL的逻辑架构图如下：</p><p><a href="https://imgchr.com/i/DiOiGQ"><img src="https://s3.ax1x.com/2020/11/15/DiOiGQ.png" alt="DiOiGQ.png"></a></p><p>​        和其它数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。主要体现在存储引擎的架构上，<strong>插件式存储引擎将查询处理和其它系统任务以及数据的存储提取相分离</strong>。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</p><p>​        <strong>一、连接层</strong></p><p>​        最上层是一些客户端和连接服务，包括本地socket通信和大多数与客户端/服务端工具的类似于tcp/ip的通信。完全一些类似于连接处理、授权认证及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全连接。服务器也会为安全接入的每个客户验证它所具有的操作权限。</p><p>​        <strong>二、服务层</strong></p><p>​        第二层架构主要完成大多数的核心功能服务，如SQL接口，并完成缓存的查询，SQL的分析和优化及部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程、函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化，如确定查询表的顺序，是否利用索引等，最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存。如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</p><p>​        <strong>三、引擎层</strong></p><p>​        存储引擎层，存储引擎真正负责了MySQL中数据的存储和读取，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同。我们平时使用最多的两种是：MyISAM和InnoDB。</p><p>​        <strong>四、存储层</strong></p><p>​        数据存储层，主要是将数据存储在运行于裸设备的文件系统之上，并完成与存储引擎的交互。</p><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>​        查看MySQL当前默认的存储引擎：<strong>show variables like ‘%storage_engine%’;</strong></p><p><a href="https://imgchr.com/i/DivyLR"><img src="https://s3.ax1x.com/2020/11/15/DivyLR.png" alt="DivyLR.png"></a></p><p>​        可以看到，我的MySQL5.7的默认存储引擎是InnoDB。上面提到了，我们最常用的两种存储引擎：MyISAM和InnoDB，这两种存储引擎的区别是什么呢？请看下图：</p><p><a href="https://imgchr.com/i/DixCmn"><img src="https://s3.ax1x.com/2020/11/15/DixCmn.png" alt="DixCmn.png"></a></p><h2 id="SQL性能下降的原因"><a href="#SQL性能下降的原因" class="headerlink" title="SQL性能下降的原因"></a>SQL性能下降的原因</h2><ul><li>​    查询语句写得太烂</li><li>​    索引失效</li><li>​    关联查询太多join(设计缺陷或不得已的需求)</li><li>​    服务器调优及各个参数设置(缓冲、线程数等)</li></ul><h2 id="SQL语句的执行顺序"><a href="#SQL语句的执行顺序" class="headerlink" title="SQL语句的执行顺序"></a>SQL语句的执行顺序</h2><p>​        我们写SQL语句一般的顺序是：</p><p>​        <strong>select -&gt;from-&gt;join-&gt;on-&gt;where-&gt;group by-&gt;having-&gt;order by-&gt;limit</strong>。</p><p>​        但是机器读取执行SQL语句的顺序和我们写SQL的顺序是一样的吗？答案是不一样。那机器执行SQL语句的顺序是怎样的呢？答案：</p><p>​        <strong>from-&gt;on-&gt;join-&gt;where-&gt;group by-&gt;having-&gt;select-&gt;order by-&gt;limit</strong>。</p><p><a href="https://imgchr.com/i/DFCNw9"><img src="https://s3.ax1x.com/2020/11/15/DFCNw9.png" alt="DFCNw9.png"></a></p><h2 id="七种join查询"><a href="#七种join查询" class="headerlink" title="七种join查询"></a>七种join查询</h2><p>​    <a href="https://imgchr.com/i/DFFwYn"><img src="https://s3.ax1x.com/2020/11/15/DFFwYn.png" alt="DFFwYn.png"></a></p><p>​        <strong>七种join的SQL编写</strong></p><p>​        建表SQL和插入数据SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tbl_dept`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`deptName` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`IocAdd` <span class="type">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">TABLE</span> `tbl_emp`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`deptId` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`id`),</span><br><span class="line">KEY `fk_dept_id`(deptId)</span><br><span class="line">#<span class="keyword">CONSTRAINT</span> <span class="keyword">FOREIGN</span> KEY(`deptId`) <span class="keyword">REFERENCES</span> `tbl_dept`(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_dept(deptName,IocAdd) <span class="keyword">VALUES</span>(&quot;RD&quot;,<span class="number">11</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_dept(deptName,IocAdd) <span class="keyword">VALUES</span>(&quot;HR&quot;,<span class="number">12</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_dept(deptName,IocAdd) <span class="keyword">VALUES</span>(&quot;MK&quot;,<span class="number">13</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_dept(deptName,IocAdd) <span class="keyword">VALUES</span>(&quot;MIS&quot;,<span class="number">14</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_dept(deptName,IocAdd) <span class="keyword">VALUES</span>(&quot;FD&quot;,<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_emp(`name`,deptId) <span class="keyword">VALUES</span>(&quot;z3&quot;,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_emp(`name`,deptId) <span class="keyword">VALUES</span>(&quot;z4&quot;,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_emp(`name`,deptId) <span class="keyword">VALUES</span>(&quot;z5&quot;,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_emp(`name`,deptId) <span class="keyword">VALUES</span>(&quot;w5&quot;,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_emp(`name`,deptId) <span class="keyword">VALUES</span>(&quot;w6&quot;,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_emp(`name`,deptId) <span class="keyword">VALUES</span>(&quot;s7&quot;,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_emp(`name`,deptId) <span class="keyword">VALUES</span>(&quot;s8&quot;,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_emp(`name`,deptId) <span class="keyword">VALUES</span>(&quot;s9&quot;,<span class="number">51</span>);</span><br></pre></td></tr></table></figure><p>​        执行上面的SQL文件，创建表，插入相应数据，接下来开始写七种join。插入完成后，tbl_emp和tbl_dept表中的数据：</p><p><a href="https://imgchr.com/i/DFlxat"><img src="https://s3.ax1x.com/2020/11/15/DFlxat.png" alt="DFlxat.png"></a><br><a href="https://imgchr.com/i/DFlzIP"><img src="https://s3.ax1x.com/2020/11/15/DFlzIP.png" alt="DFlzIP.png"></a></p><h3 id="第一种：inner-join"><a href="#第一种：inner-join" class="headerlink" title="第一种：inner join"></a>第一种：inner join</h3><p><a href="https://imgchr.com/i/DF3ocD"><img src="https://s3.ax1x.com/2020/11/15/DF3ocD.png" alt="DF3ocD.png"></a></p><p>​    inner join主要是查=查询两个表的公共部分，看成两个圆的话，就是两个圆的相交部分。</p><h3 id="第二种：left-join"><a href="#第二种：left-join" class="headerlink" title="第二种：left join"></a>第二种：left join</h3><p>​    <a href="https://imgchr.com/i/DF8gxS"><img src="https://s3.ax1x.com/2020/11/15/DF8gxS.png" alt="DF8gxS.png"></a></p><p>​        left join的作用就是：查询出两个表的公共部分，外加左表(left join左边的表即为左表，这里的tbl_dept)的独有部分，而右表(这里的tbl_emp)中不满足部分用null填充。</p><h3 id="第三种：right-join"><a href="#第三种：right-join" class="headerlink" title="第三种：right join"></a>第三种：right join</h3><p><a href="https://imgchr.com/i/DFGuJP"><img src="https://s3.ax1x.com/2020/11/15/DFGuJP.png" alt="DFGuJP.png"></a></p><p>​        right join和left join相反，它是查询出两个表的公共部分，外加右表(right join右表的表即为右表，这里的tbl_emp)的独有部分，而左表(这里的tbl_dept)中不满足部门使用null进行填充。</p><h3 id="第四种：left-join排除公共部分"><a href="#第四种：left-join排除公共部分" class="headerlink" title="第四种：left join排除公共部分"></a>第四种：left join排除公共部分</h3><p>​    <a href="https://imgchr.com/i/DFG5Oe"><img src="https://s3.ax1x.com/2020/11/15/DFG5Oe.png" alt="DFG5Oe.png"></a></p><p>​        这种left join就相当于，在第二种的left join的基础上，添加了一个去掉公共部分的筛选条件，相当于是查询出左表中独有的部分。</p><h3 id="第五种：right-join排除公共部分"><a href="#第五种：right-join排除公共部分" class="headerlink" title="第五种：right join排除公共部分"></a>第五种：right join排除公共部分</h3><p>​        <a href="https://imgchr.com/i/DFJZXF"><img src="https://s3.ax1x.com/2020/11/15/DFJZXF.png" alt="DFJZXF.png"></a></p><p>​        与上面的left join排除公共部分相反，right join排除公共部分是查询出右表中独有的部分。</p><h3 id="第六种：full-outer-join"><a href="#第六种：full-outer-join" class="headerlink" title="第六种：full outer join"></a>第六种：full outer join</h3><p>​        <a href="https://imgchr.com/i/DFtuJ1"><img src="https://s3.ax1x.com/2020/11/15/DFtuJ1.png" alt="DFtuJ1.png"></a></p><p>​        full outer join相当于是查询出两个表中的所有数据，注意：不是笛卡尔积，这里由于MySQL不支持full outer join，所以途中这块的SQL语句有一点问题，我们这里使用union，将left join查询出的结果和right join排除公共部分查询出的结果使用union联合即可。由于<strong>union有合并+去重的作用</strong>，这里也可以将left join的结果和right join的结果进行union，最终得到的也是正确答案。</p><p><a href="https://imgchr.com/i/DFtuJ1"><img src="https://s3.ax1x.com/2020/11/15/DFtuJ1.png" alt="DFtuJ1.png"></a></p><h3 id="第七种：full-outer-join排除公共部分"><a href="#第七种：full-outer-join排除公共部分" class="headerlink" title="第七种：full outer join排除公共部分"></a>第七种：full outer join排除公共部分</h3><p>​        <a href="https://imgchr.com/i/DFNQts"><img src="https://s3.ax1x.com/2020/11/15/DFNQts.png" alt="DFNQts.png"></a></p><p>​        这种的话相当于是将两个表的独有部分联合起来，我们就使用left join排除公共部分的结果联合right join排除公共部分的结果，作为最终的查询结果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL基础知识&quot;&gt;&lt;a href=&quot;#MySQL基础知识&quot; class=&quot;headerlink&quot; title=&quot;MySQL基础知识&quot;&gt;&lt;/a&gt;MySQL基础知识&lt;/h1&gt;&lt;p&gt;​        MySQL中查看安装路径的命令：ps -ef|grep mysql</summary>
      
    
    
    
    <category term="database" scheme="http://example.com/categories/database/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>try-catch-finally</title>
    <link href="http://example.com/2021/03/23/try-catch-finally/"/>
    <id>http://example.com/2021/03/23/try-catch-finally/</id>
    <published>2021-03-23T07:49:14.000Z</published>
    <updated>2021-03-23T07:54:48.302Z</updated>
    
    <content type="html"><![CDATA[<p>​        关于try-catch-finally这个应该都已经很熟悉了，关于try-catch-finally我想 “finally语句块一定会被执行” 这句话大家应该都听过。接下来我们就来看看一些比较特殊的情况。</p><h3 id="try和catch中含有return且没有异常"><a href="#try和catch中含有return且没有异常" class="headerlink" title="try和catch中含有return且没有异常"></a>try和catch中含有return且没有异常</h3><p>​    示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;try...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;exception occur...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​        这段程序中，try语句块和catch语句块中都含有return语句，且没有出现异常，这种情况下，finally语句块中的return还会不会被执行呢？看看运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>...</span><br><span class="line"><span class="keyword">finally</span>...</span><br></pre></td></tr></table></figure><p>​        从运行结果中可以看出，虽然try语句块中含有return语句，但finally中的语句还是被执行了，这说明如果try语句块中含有return语句，finally中的语句会在return执行之前被执行。</p><h3 id="try和catch中含有return且有异常"><a href="#try和catch中含有return且有异常" class="headerlink" title="try和catch中含有return且有异常"></a>try和catch中含有return且有异常</h3><p>​        示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;try...&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;exception occur...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        与第一种情况的示例代码不同的地方在于，这次我们让他出现异常，如果按之前说的，finally语句一定会被执行，那finally语句应该还在catch中的return执行之前被执行。我们来看看运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>...</span><br><span class="line">exception occur...</span><br><span class="line"><span class="keyword">finally</span>...</span><br></pre></td></tr></table></figure><p>​        从运行结果可以看出，结果确实如我们所说，finally中的语句会在catch中的return语句执行之前被执行。上面讨论的两种情况都是没有返回值的，接下来我们再模拟几种有返回值的情况。</p><h3 id="try-catch-finally都有返回值且无异常"><a href="#try-catch-finally都有返回值且无异常" class="headerlink" title="try-catch-finally都有返回值且无异常"></a>try-catch-finally都有返回值且无异常</h3><p>​        实例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;try...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;exception occur...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        上面这段代码主要是模拟try-catch-finally三个代码块中都有返回值且没有异常出现的情况下，如果我们接收返回值并打印，打印的返回值会是几呢？我们可以运行一下并查看运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>...</span><br><span class="line"><span class="keyword">finally</span>...</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>​        从运行结果中可以看到，当没有异常出现，try和finally都有返回的情况下，finally中的返回值会覆盖掉try中的返回值。那如果出现异常呢？finally还会不会覆盖掉catch中的返回值呢？</p><h3 id="try-catch-finally都有返回值且有异常"><a href="#try-catch-finally都有返回值且有异常" class="headerlink" title="try-catch-finally都有返回值且有异常"></a>try-catch-finally都有返回值且有异常</h3><p>​        示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;try...&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;exception occur...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        上面这段代码和上一种情况的代码相比，我们让它出现异常，看看这种情况下，我们接收打印出的返回值会是几，2还是3？运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>...</span><br><span class="line">exception occur...</span><br><span class="line"><span class="keyword">finally</span>...</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>​        从运行结果中可以看出，finally中的返回值确实覆盖了catch中的返回值。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​        对于try-catch-finally，如果都有return语句的情况下，没有出现异常的情况，finally中的语句会在try代码块中return执行之前被执行，即    try中return之前的代码 ==&gt; finally ==&gt; try中的return，出现异常的情况与之类似，执行时机会是：catch中return之前的代码 ==&gt; finally ==&gt; catch中的return。而对于有返回值的情况，如果没有出现异常且try中有返回值finally中无返回值，最终接收到的返回值就会是try中的返回值，出现异常的情况，catch有返回值finally无返回值，接收到的会是catch中的返回值。但是对于try、catch、finally三个代码块中，只要finally中有返回值，无论是否出现异常，最终接收到的返回值都会是finally中的。</p><p>​        另外说一下，如果没有出现异常的情况，try中调用System.exit()，这种情况下，finally中的语句就不会被执行了，出现异常的情况类似，catch中调用System.exit()，finally中的语句也不会被执行。代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;<span class="comment">// 运行结果：try...</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;try...&quot;</span>);</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;exception occur...&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;<span class="comment">// 运行结果：try...exception occur...</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;try...&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;exception occur...&quot;</span>);</span><br><span class="line">        System.exit(-<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​        关于try-catch-finally这个应该都已经很熟悉了，关于try-catch-finally我想 “finally语句块一定会被执行” 这句话大家应该都听过。接下来我们就来看看一些比较特殊的情况。&lt;/p&gt;
&lt;h3 id=&quot;try和catch中含有r</summary>
      
    
    
    
    <category term="JavaSe" scheme="http://example.com/categories/JavaSe/"/>
    
    
    <category term="JavaSe" scheme="http://example.com/tags/JavaSe/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList小知识</title>
    <link href="http://example.com/2021/03/23/ArrayList%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    <id>http://example.com/2021/03/23/ArrayList%E5%B0%8F%E7%9F%A5%E8%AF%86/</id>
    <published>2021-03-23T03:39:26.000Z</published>
    <updated>2021-03-23T07:50:22.681Z</updated>
    
    <content type="html"><![CDATA[<p>​        对于AarrayList，这个应该都比较熟悉了，平时用到ArrayList的场景也比较多。我们写这篇文章主要是对ArrayList的部分源码做一些解析。这里说明一下，以下所有内容都是基于JDK1.8。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>​        ArrayList底层的数据结构是一个Object类型的数组。ArrayList的默认初始化容量为10。ArrayList和HashMap一样，采用的都是延迟加载的方式，即在使用无参构造器创建时创建的只是一个空数组，只有在我们第一次往ArrayList中添加元素时才会默认创建长度为10的Object类型的数组。ArrayList的扩容机制和HashMap不一样，只有当容量真的不足时才会去扩容，扩容后的容量为扩容前容量的1.5倍（具体计算方法是：新容量 = 旧容量 + 旧容量 &gt;&gt; 2）。</p><h2 id="add-int-index-E-element"><a href="#add-int-index-E-element" class="headerlink" title="add(int index,E element)"></a>add(int index,E element)</h2><p>​        我们平时往ArrayList中添加元素一般都是使用的一个参数的add方法，这个方法大家都很熟悉了，我们首先要讲的确实是add方法，不过不是一个参数的add方法，而是两个参数的，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        我们为什么会想到讲这个方法呢？在我昨天看QQ群里的一些聊天记录时，发现有一个水友在群里发了一个Leetcode的题目以及该题的答案，题目的意思大概是传入一个链表，我们需要做的就是将链表中的元素倒序写到一个ArrayList中冰将该ArrayList返回，答案中就使用到了ArrayList中带两个参数的add方法。</p><p>​        根据上面的源码，第一行首先是先检查下标是否合法，因为我们知道ArrayList底层的数据结构是一个Object类型的数组，检查传入index的合法性主要是为了避免数组越界的问题，这个是很好理解的。这个方法中核心的代码就是最后那句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br></pre></td></tr></table></figure><p>​        它首先是将插入前，index处及其后面的元素都往后移一个位置，将索引为index处的位置空下来后再将我们的要插入的元素放入index处，之后size++。所以这个方法的作用就是，将指定元素插入到指定索引处位置，如果插入前该位置有元素，则将该位置的元素及其后面的元素往后移一个位置，index处空下来后再将元素插入。所以我们刚刚说到的那题就是利用了这个特点，我们只需要每次遍历链表中的元素后，每次都将链表的元素放入到ArrayList的索引为0处的位置，最终就能实现将链表的元素倒序存储到ArrayList中。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​        对于AarrayList，这个应该都比较熟悉了，平时用到ArrayList的场景也比较多。我们写这篇文章主要是对ArrayList的部分源码做一些解析。这里说明一下，以下所有内容都是基于JDK1.8。&lt;/p&gt;
&lt;h2 id=&quot;前置知识&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="JavaSe" scheme="http://example.com/categories/JavaSe/"/>
    
    
    <category term="JavaSe" scheme="http://example.com/tags/JavaSe/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/03/23/hello-world/"/>
    <id>http://example.com/2021/03/23/hello-world/</id>
    <published>2021-03-23T03:15:51.462Z</published>
    <updated>2021-03-23T07:56:18.855Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
