<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-23T07:54:48.302Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Radishn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>try-catch-finally</title>
    <link href="http://example.com/2021/03/23/try-catch-finally/"/>
    <id>http://example.com/2021/03/23/try-catch-finally/</id>
    <published>2021-03-23T07:49:14.000Z</published>
    <updated>2021-03-23T07:54:48.302Z</updated>
    
    <content type="html"><![CDATA[<p>​        关于try-catch-finally这个应该都已经很熟悉了，关于try-catch-finally我想 “finally语句块一定会被执行” 这句话大家应该都听过。接下来我们就来看看一些比较特殊的情况。</p><h3 id="try和catch中含有return且没有异常"><a href="#try和catch中含有return且没有异常" class="headerlink" title="try和catch中含有return且没有异常"></a>try和catch中含有return且没有异常</h3><p>​    示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;try...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;exception occur...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​        这段程序中，try语句块和catch语句块中都含有return语句，且没有出现异常，这种情况下，finally语句块中的return还会不会被执行呢？看看运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>...</span><br><span class="line"><span class="keyword">finally</span>...</span><br></pre></td></tr></table></figure><p>​        从运行结果中可以看出，虽然try语句块中含有return语句，但finally中的语句还是被执行了，这说明如果try语句块中含有return语句，finally中的语句会在return执行之前被执行。</p><h3 id="try和catch中含有return且有异常"><a href="#try和catch中含有return且有异常" class="headerlink" title="try和catch中含有return且有异常"></a>try和catch中含有return且有异常</h3><p>​        示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;try...&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;exception occur...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        与第一种情况的示例代码不同的地方在于，这次我们让他出现异常，如果按之前说的，finally语句一定会被执行，那finally语句应该还在catch中的return执行之前被执行。我们来看看运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>...</span><br><span class="line">exception occur...</span><br><span class="line"><span class="keyword">finally</span>...</span><br></pre></td></tr></table></figure><p>​        从运行结果可以看出，结果确实如我们所说，finally中的语句会在catch中的return语句执行之前被执行。上面讨论的两种情况都是没有返回值的，接下来我们再模拟几种有返回值的情况。</p><h3 id="try-catch-finally都有返回值且无异常"><a href="#try-catch-finally都有返回值且无异常" class="headerlink" title="try-catch-finally都有返回值且无异常"></a>try-catch-finally都有返回值且无异常</h3><p>​        实例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;try...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;exception occur...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        上面这段代码主要是模拟try-catch-finally三个代码块中都有返回值且没有异常出现的情况下，如果我们接收返回值并打印，打印的返回值会是几呢？我们可以运行一下并查看运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>...</span><br><span class="line"><span class="keyword">finally</span>...</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>​        从运行结果中可以看到，当没有异常出现，try和finally都有返回的情况下，finally中的返回值会覆盖掉try中的返回值。那如果出现异常呢？finally还会不会覆盖掉catch中的返回值呢？</p><h3 id="try-catch-finally都有返回值且有异常"><a href="#try-catch-finally都有返回值且有异常" class="headerlink" title="try-catch-finally都有返回值且有异常"></a>try-catch-finally都有返回值且有异常</h3><p>​        示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;try...&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;exception occur...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        上面这段代码和上一种情况的代码相比，我们让它出现异常，看看这种情况下，我们接收打印出的返回值会是几，2还是3？运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>...</span><br><span class="line">exception occur...</span><br><span class="line"><span class="keyword">finally</span>...</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>​        从运行结果中可以看出，finally中的返回值确实覆盖了catch中的返回值。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​        对于try-catch-finally，如果都有return语句的情况下，没有出现异常的情况，finally中的语句会在try代码块中return执行之前被执行，即    try中return之前的代码 ==&gt; finally ==&gt; try中的return，出现异常的情况与之类似，执行时机会是：catch中return之前的代码 ==&gt; finally ==&gt; catch中的return。而对于有返回值的情况，如果没有出现异常且try中有返回值finally中无返回值，最终接收到的返回值就会是try中的返回值，出现异常的情况，catch有返回值finally无返回值，接收到的会是catch中的返回值。但是对于try、catch、finally三个代码块中，只要finally中有返回值，无论是否出现异常，最终接收到的返回值都会是finally中的。</p><p>​        另外说一下，如果没有出现异常的情况，try中调用System.exit()，这种情况下，finally中的语句就不会被执行了，出现异常的情况类似，catch中调用System.exit()，finally中的语句也不会被执行。代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;<span class="comment">// 运行结果：try...</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;try...&quot;</span>);</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;exception occur...&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;<span class="comment">// 运行结果：try...exception occur...</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;try...&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;exception occur...&quot;</span>);</span><br><span class="line">        System.exit(-<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​        关于try-catch-finally这个应该都已经很熟悉了，关于try-catch-finally我想 “finally语句块一定会被执行” 这句话大家应该都听过。接下来我们就来看看一些比较特殊的情况。&lt;/p&gt;
&lt;h3 id=&quot;try和catch中含有r</summary>
      
    
    
    
    <category term="JavaSe" scheme="http://example.com/categories/JavaSe/"/>
    
    
    <category term="JavaSe" scheme="http://example.com/tags/JavaSe/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList小知识</title>
    <link href="http://example.com/2021/03/23/ArrayList%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    <id>http://example.com/2021/03/23/ArrayList%E5%B0%8F%E7%9F%A5%E8%AF%86/</id>
    <published>2021-03-23T03:39:26.000Z</published>
    <updated>2021-03-23T07:50:22.681Z</updated>
    
    <content type="html"><![CDATA[<p>​        对于AarrayList，这个应该都比较熟悉了，平时用到ArrayList的场景也比较多。我们写这篇文章主要是对ArrayList的部分源码做一些解析。这里说明一下，以下所有内容都是基于JDK1.8。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>​        ArrayList底层的数据结构是一个Object类型的数组。ArrayList的默认初始化容量为10。ArrayList和HashMap一样，采用的都是延迟加载的方式，即在使用无参构造器创建时创建的只是一个空数组，只有在我们第一次往ArrayList中添加元素时才会默认创建长度为10的Object类型的数组。ArrayList的扩容机制和HashMap不一样，只有当容量真的不足时才会去扩容，扩容后的容量为扩容前容量的1.5倍（具体计算方法是：新容量 = 旧容量 + 旧容量 &gt;&gt; 2）。</p><h2 id="add-int-index-E-element"><a href="#add-int-index-E-element" class="headerlink" title="add(int index,E element)"></a>add(int index,E element)</h2><p>​        我们平时往ArrayList中添加元素一般都是使用的一个参数的add方法，这个方法大家都很熟悉了，我们首先要讲的确实是add方法，不过不是一个参数的add方法，而是两个参数的，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        我们为什么会想到讲这个方法呢？在我昨天看QQ群里的一些聊天记录时，发现有一个水友在群里发了一个Leetcode的题目以及该题的答案，题目的意思大概是传入一个链表，我们需要做的就是将链表中的元素倒序写到一个ArrayList中冰将该ArrayList返回，答案中就使用到了ArrayList中带两个参数的add方法。</p><p>​        根据上面的源码，第一行首先是先检查下标是否合法，因为我们知道ArrayList底层的数据结构是一个Object类型的数组，检查传入index的合法性主要是为了避免数组越界的问题，这个是很好理解的。这个方法中核心的代码就是最后那句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br></pre></td></tr></table></figure><p>​        它首先是将插入前，index处及其后面的元素都往后移一个位置，将索引为index处的位置空下来后再将我们的要插入的元素放入index处，之后size++。所以这个方法的作用就是，将指定元素插入到指定索引处位置，如果插入前该位置有元素，则将该位置的元素及其后面的元素往后移一个位置，index处空下来后再将元素插入。所以我们刚刚说到的那题就是利用了这个特点，我们只需要每次遍历链表中的元素后，每次都将链表的元素放入到ArrayList的索引为0处的位置，最终就能实现将链表的元素倒序存储到ArrayList中。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​        对于AarrayList，这个应该都比较熟悉了，平时用到ArrayList的场景也比较多。我们写这篇文章主要是对ArrayList的部分源码做一些解析。这里说明一下，以下所有内容都是基于JDK1.8。&lt;/p&gt;
&lt;h2 id=&quot;前置知识&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="JavaSe" scheme="http://example.com/categories/JavaSe/"/>
    
    
    <category term="JavaSe" scheme="http://example.com/tags/JavaSe/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/03/23/hello-world/"/>
    <id>http://example.com/2021/03/23/hello-world/</id>
    <published>2021-03-23T03:15:51.462Z</published>
    <updated>2021-03-23T03:15:51.462Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
