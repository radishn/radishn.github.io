{"pages":[],"posts":[{"title":"ArrayList小知识","text":"​ 对于AarrayList，这个应该都比较熟悉了，平时用到ArrayList的场景也比较多。我们写这篇文章主要是对ArrayList的部分源码做一些解析。这里说明一下，以下所有内容都是基于JDK1.8。 前置知识​ ArrayList底层的数据结构是一个Object类型的数组。ArrayList的默认初始化容量为10。ArrayList和HashMap一样，采用的都是延迟加载的方式，即在使用无参构造器创建时创建的只是一个空数组，只有在我们第一次往ArrayList中添加元素时才会默认创建长度为10的Object类型的数组。ArrayList的扩容机制和HashMap不一样，只有当容量真的不足时才会去扩容，扩容后的容量为扩容前容量的1.5倍（具体计算方法是：新容量 = 旧容量 + 旧容量 &gt;&gt; 2）。 add(int index,E element)​ 我们平时往ArrayList中添加元素一般都是使用的一个参数的add方法，这个方法大家都很熟悉了，我们首先要讲的确实是add方法，不过不是一个参数的add方法，而是两个参数的，源码如下： 12345678public void add(int index, E element) { rangeCheckForAdd(index); ensureCapacityInternal(size + 1); // Increments modCount!! System.arraycopy(elementData, index, elementData, index + 1,size - index); elementData[index] = element; size++;} ​ 我们为什么会想到讲这个方法呢？在我昨天看QQ群里的一些聊天记录时，发现有一个水友在群里发了一个Leetcode的题目以及该题的答案，题目的意思大概是传入一个链表，我们需要做的就是将链表中的元素倒序写到一个ArrayList中冰将该ArrayList返回，答案中就使用到了ArrayList中带两个参数的add方法。 ​ 根据上面的源码，第一行首先是先检查下标是否合法，因为我们知道ArrayList底层的数据结构是一个Object类型的数组，检查传入index的合法性主要是为了避免数组越界的问题，这个是很好理解的。这个方法中核心的代码就是最后那句： 123System.arraycopy(elementData, index, elementData, index + 1,size - index); elementData[index] = element; size++; ​ 它首先是将插入前，index处及其后面的元素都往后移一个位置，将索引为index处的位置空下来后再将我们的要插入的元素放入index处，之后size++。所以这个方法的作用就是，将指定元素插入到指定索引处位置，如果插入前该位置有元素，则将该位置的元素及其后面的元素往后移一个位置，index处空下来后再将元素插入。所以我们刚刚说到的那题就是利用了这个特点，我们只需要每次遍历链表中的元素后，每次都将链表的元素放入到ArrayList的索引为0处的位置，最终就能实现将链表的元素倒序存储到ArrayList中。","link":"/2021/03/23/ArrayList%E5%B0%8F%E7%9F%A5%E8%AF%86/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2021/03/23/hello-world/"}],"tags":[{"name":"JavaSe","slug":"JavaSe","link":"/tags/JavaSe/"}],"categories":[]}